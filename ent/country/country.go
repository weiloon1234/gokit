// Code generated by ent, DO NOT EDIT.

package country

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the country type in the database.
	Label = "country"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldIso2 holds the string denoting the iso2 field in the database.
	FieldIso2 = "iso2"
	// FieldIso3 holds the string denoting the iso3 field in the database.
	FieldIso3 = "iso3"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldOfficialName holds the string denoting the official_name field in the database.
	FieldOfficialName = "official_name"
	// FieldNumericCode holds the string denoting the numeric_code field in the database.
	FieldNumericCode = "numeric_code"
	// FieldPhoneCode holds the string denoting the phone_code field in the database.
	FieldPhoneCode = "phone_code"
	// FieldCapital holds the string denoting the capital field in the database.
	FieldCapital = "capital"
	// FieldCurrencyName holds the string denoting the currency_name field in the database.
	FieldCurrencyName = "currency_name"
	// FieldCurrencyCode holds the string denoting the currency_code field in the database.
	FieldCurrencyCode = "currency_code"
	// FieldCurrencySymbol holds the string denoting the currency_symbol field in the database.
	FieldCurrencySymbol = "currency_symbol"
	// FieldConversionRate holds the string denoting the conversion_rate field in the database.
	FieldConversionRate = "conversion_rate"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// Table holds the table name of the country in the database.
	Table = "countries"
)

// Columns holds all SQL columns for country fields.
var Columns = []string{
	FieldID,
	FieldIso2,
	FieldIso3,
	FieldName,
	FieldOfficialName,
	FieldNumericCode,
	FieldPhoneCode,
	FieldCapital,
	FieldCurrencyName,
	FieldCurrencyCode,
	FieldCurrencySymbol,
	FieldConversionRate,
	FieldStatus,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// Iso2Validator is a validator for the "iso2" field. It is called by the builders before save.
	Iso2Validator func(string) error
	// Iso3Validator is a validator for the "iso3" field. It is called by the builders before save.
	Iso3Validator func(string) error
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// DefaultConversionRate holds the default value on creation for the "conversion_rate" field.
	DefaultConversionRate float64
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus uint8
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the Country queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByIso2 orders the results by the iso2 field.
func ByIso2(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIso2, opts...).ToFunc()
}

// ByIso3 orders the results by the iso3 field.
func ByIso3(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIso3, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByOfficialName orders the results by the official_name field.
func ByOfficialName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOfficialName, opts...).ToFunc()
}

// ByNumericCode orders the results by the numeric_code field.
func ByNumericCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNumericCode, opts...).ToFunc()
}

// ByPhoneCode orders the results by the phone_code field.
func ByPhoneCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPhoneCode, opts...).ToFunc()
}

// ByCapital orders the results by the capital field.
func ByCapital(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCapital, opts...).ToFunc()
}

// ByCurrencyName orders the results by the currency_name field.
func ByCurrencyName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCurrencyName, opts...).ToFunc()
}

// ByCurrencyCode orders the results by the currency_code field.
func ByCurrencyCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCurrencyCode, opts...).ToFunc()
}

// ByCurrencySymbol orders the results by the currency_symbol field.
func ByCurrencySymbol(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCurrencySymbol, opts...).ToFunc()
}

// ByConversionRate orders the results by the conversion_rate field.
func ByConversionRate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldConversionRate, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}
