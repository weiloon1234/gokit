// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/weiloon1234/gokit/ent/country"
	"github.com/weiloon1234/gokit/ent/countrylocation"
	"github.com/weiloon1234/gokit/ent/predicate"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeCountry         = "Country"
	TypeCountryLocation = "CountryLocation"
)

// CountryMutation represents an operation that mutates the Country nodes in the graph.
type CountryMutation struct {
	config
	op                 Op
	typ                string
	id                 *uint64
	iso2               *string
	iso3               *string
	name               *string
	official_name      *string
	numeric_code       *string
	phone_code         *string
	capital            *string
	currency_name      *string
	currency_code      *string
	currency_symbol    *string
	conversion_rate    *float64
	addconversion_rate *float64
	status             *uint8
	addstatus          *int8
	created_at         *time.Time
	updated_at         *time.Time
	clearedFields      map[string]struct{}
	locations          map[uint64]struct{}
	removedlocations   map[uint64]struct{}
	clearedlocations   bool
	done               bool
	oldValue           func(context.Context) (*Country, error)
	predicates         []predicate.Country
}

var _ ent.Mutation = (*CountryMutation)(nil)

// countryOption allows management of the mutation configuration using functional options.
type countryOption func(*CountryMutation)

// newCountryMutation creates new mutation for the Country entity.
func newCountryMutation(c config, op Op, opts ...countryOption) *CountryMutation {
	m := &CountryMutation{
		config:        c,
		op:            op,
		typ:           TypeCountry,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCountryID sets the ID field of the mutation.
func withCountryID(id uint64) countryOption {
	return func(m *CountryMutation) {
		var (
			err   error
			once  sync.Once
			value *Country
		)
		m.oldValue = func(ctx context.Context) (*Country, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Country.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCountry sets the old Country of the mutation.
func withCountry(node *Country) countryOption {
	return func(m *CountryMutation) {
		m.oldValue = func(context.Context) (*Country, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CountryMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CountryMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Country entities.
func (m *CountryMutation) SetID(id uint64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CountryMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CountryMutation) IDs(ctx context.Context) ([]uint64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Country.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetIso2 sets the "iso2" field.
func (m *CountryMutation) SetIso2(s string) {
	m.iso2 = &s
}

// Iso2 returns the value of the "iso2" field in the mutation.
func (m *CountryMutation) Iso2() (r string, exists bool) {
	v := m.iso2
	if v == nil {
		return
	}
	return *v, true
}

// OldIso2 returns the old "iso2" field's value of the Country entity.
// If the Country object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CountryMutation) OldIso2(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIso2 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIso2 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIso2: %w", err)
	}
	return oldValue.Iso2, nil
}

// ResetIso2 resets all changes to the "iso2" field.
func (m *CountryMutation) ResetIso2() {
	m.iso2 = nil
}

// SetIso3 sets the "iso3" field.
func (m *CountryMutation) SetIso3(s string) {
	m.iso3 = &s
}

// Iso3 returns the value of the "iso3" field in the mutation.
func (m *CountryMutation) Iso3() (r string, exists bool) {
	v := m.iso3
	if v == nil {
		return
	}
	return *v, true
}

// OldIso3 returns the old "iso3" field's value of the Country entity.
// If the Country object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CountryMutation) OldIso3(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIso3 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIso3 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIso3: %w", err)
	}
	return oldValue.Iso3, nil
}

// ResetIso3 resets all changes to the "iso3" field.
func (m *CountryMutation) ResetIso3() {
	m.iso3 = nil
}

// SetName sets the "name" field.
func (m *CountryMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *CountryMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Country entity.
// If the Country object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CountryMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *CountryMutation) ResetName() {
	m.name = nil
}

// SetOfficialName sets the "official_name" field.
func (m *CountryMutation) SetOfficialName(s string) {
	m.official_name = &s
}

// OfficialName returns the value of the "official_name" field in the mutation.
func (m *CountryMutation) OfficialName() (r string, exists bool) {
	v := m.official_name
	if v == nil {
		return
	}
	return *v, true
}

// OldOfficialName returns the old "official_name" field's value of the Country entity.
// If the Country object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CountryMutation) OldOfficialName(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOfficialName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOfficialName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOfficialName: %w", err)
	}
	return oldValue.OfficialName, nil
}

// ClearOfficialName clears the value of the "official_name" field.
func (m *CountryMutation) ClearOfficialName() {
	m.official_name = nil
	m.clearedFields[country.FieldOfficialName] = struct{}{}
}

// OfficialNameCleared returns if the "official_name" field was cleared in this mutation.
func (m *CountryMutation) OfficialNameCleared() bool {
	_, ok := m.clearedFields[country.FieldOfficialName]
	return ok
}

// ResetOfficialName resets all changes to the "official_name" field.
func (m *CountryMutation) ResetOfficialName() {
	m.official_name = nil
	delete(m.clearedFields, country.FieldOfficialName)
}

// SetNumericCode sets the "numeric_code" field.
func (m *CountryMutation) SetNumericCode(s string) {
	m.numeric_code = &s
}

// NumericCode returns the value of the "numeric_code" field in the mutation.
func (m *CountryMutation) NumericCode() (r string, exists bool) {
	v := m.numeric_code
	if v == nil {
		return
	}
	return *v, true
}

// OldNumericCode returns the old "numeric_code" field's value of the Country entity.
// If the Country object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CountryMutation) OldNumericCode(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNumericCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNumericCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNumericCode: %w", err)
	}
	return oldValue.NumericCode, nil
}

// ClearNumericCode clears the value of the "numeric_code" field.
func (m *CountryMutation) ClearNumericCode() {
	m.numeric_code = nil
	m.clearedFields[country.FieldNumericCode] = struct{}{}
}

// NumericCodeCleared returns if the "numeric_code" field was cleared in this mutation.
func (m *CountryMutation) NumericCodeCleared() bool {
	_, ok := m.clearedFields[country.FieldNumericCode]
	return ok
}

// ResetNumericCode resets all changes to the "numeric_code" field.
func (m *CountryMutation) ResetNumericCode() {
	m.numeric_code = nil
	delete(m.clearedFields, country.FieldNumericCode)
}

// SetPhoneCode sets the "phone_code" field.
func (m *CountryMutation) SetPhoneCode(s string) {
	m.phone_code = &s
}

// PhoneCode returns the value of the "phone_code" field in the mutation.
func (m *CountryMutation) PhoneCode() (r string, exists bool) {
	v := m.phone_code
	if v == nil {
		return
	}
	return *v, true
}

// OldPhoneCode returns the old "phone_code" field's value of the Country entity.
// If the Country object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CountryMutation) OldPhoneCode(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPhoneCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPhoneCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPhoneCode: %w", err)
	}
	return oldValue.PhoneCode, nil
}

// ClearPhoneCode clears the value of the "phone_code" field.
func (m *CountryMutation) ClearPhoneCode() {
	m.phone_code = nil
	m.clearedFields[country.FieldPhoneCode] = struct{}{}
}

// PhoneCodeCleared returns if the "phone_code" field was cleared in this mutation.
func (m *CountryMutation) PhoneCodeCleared() bool {
	_, ok := m.clearedFields[country.FieldPhoneCode]
	return ok
}

// ResetPhoneCode resets all changes to the "phone_code" field.
func (m *CountryMutation) ResetPhoneCode() {
	m.phone_code = nil
	delete(m.clearedFields, country.FieldPhoneCode)
}

// SetCapital sets the "capital" field.
func (m *CountryMutation) SetCapital(s string) {
	m.capital = &s
}

// Capital returns the value of the "capital" field in the mutation.
func (m *CountryMutation) Capital() (r string, exists bool) {
	v := m.capital
	if v == nil {
		return
	}
	return *v, true
}

// OldCapital returns the old "capital" field's value of the Country entity.
// If the Country object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CountryMutation) OldCapital(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCapital is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCapital requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCapital: %w", err)
	}
	return oldValue.Capital, nil
}

// ClearCapital clears the value of the "capital" field.
func (m *CountryMutation) ClearCapital() {
	m.capital = nil
	m.clearedFields[country.FieldCapital] = struct{}{}
}

// CapitalCleared returns if the "capital" field was cleared in this mutation.
func (m *CountryMutation) CapitalCleared() bool {
	_, ok := m.clearedFields[country.FieldCapital]
	return ok
}

// ResetCapital resets all changes to the "capital" field.
func (m *CountryMutation) ResetCapital() {
	m.capital = nil
	delete(m.clearedFields, country.FieldCapital)
}

// SetCurrencyName sets the "currency_name" field.
func (m *CountryMutation) SetCurrencyName(s string) {
	m.currency_name = &s
}

// CurrencyName returns the value of the "currency_name" field in the mutation.
func (m *CountryMutation) CurrencyName() (r string, exists bool) {
	v := m.currency_name
	if v == nil {
		return
	}
	return *v, true
}

// OldCurrencyName returns the old "currency_name" field's value of the Country entity.
// If the Country object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CountryMutation) OldCurrencyName(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCurrencyName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCurrencyName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCurrencyName: %w", err)
	}
	return oldValue.CurrencyName, nil
}

// ClearCurrencyName clears the value of the "currency_name" field.
func (m *CountryMutation) ClearCurrencyName() {
	m.currency_name = nil
	m.clearedFields[country.FieldCurrencyName] = struct{}{}
}

// CurrencyNameCleared returns if the "currency_name" field was cleared in this mutation.
func (m *CountryMutation) CurrencyNameCleared() bool {
	_, ok := m.clearedFields[country.FieldCurrencyName]
	return ok
}

// ResetCurrencyName resets all changes to the "currency_name" field.
func (m *CountryMutation) ResetCurrencyName() {
	m.currency_name = nil
	delete(m.clearedFields, country.FieldCurrencyName)
}

// SetCurrencyCode sets the "currency_code" field.
func (m *CountryMutation) SetCurrencyCode(s string) {
	m.currency_code = &s
}

// CurrencyCode returns the value of the "currency_code" field in the mutation.
func (m *CountryMutation) CurrencyCode() (r string, exists bool) {
	v := m.currency_code
	if v == nil {
		return
	}
	return *v, true
}

// OldCurrencyCode returns the old "currency_code" field's value of the Country entity.
// If the Country object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CountryMutation) OldCurrencyCode(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCurrencyCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCurrencyCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCurrencyCode: %w", err)
	}
	return oldValue.CurrencyCode, nil
}

// ClearCurrencyCode clears the value of the "currency_code" field.
func (m *CountryMutation) ClearCurrencyCode() {
	m.currency_code = nil
	m.clearedFields[country.FieldCurrencyCode] = struct{}{}
}

// CurrencyCodeCleared returns if the "currency_code" field was cleared in this mutation.
func (m *CountryMutation) CurrencyCodeCleared() bool {
	_, ok := m.clearedFields[country.FieldCurrencyCode]
	return ok
}

// ResetCurrencyCode resets all changes to the "currency_code" field.
func (m *CountryMutation) ResetCurrencyCode() {
	m.currency_code = nil
	delete(m.clearedFields, country.FieldCurrencyCode)
}

// SetCurrencySymbol sets the "currency_symbol" field.
func (m *CountryMutation) SetCurrencySymbol(s string) {
	m.currency_symbol = &s
}

// CurrencySymbol returns the value of the "currency_symbol" field in the mutation.
func (m *CountryMutation) CurrencySymbol() (r string, exists bool) {
	v := m.currency_symbol
	if v == nil {
		return
	}
	return *v, true
}

// OldCurrencySymbol returns the old "currency_symbol" field's value of the Country entity.
// If the Country object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CountryMutation) OldCurrencySymbol(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCurrencySymbol is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCurrencySymbol requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCurrencySymbol: %w", err)
	}
	return oldValue.CurrencySymbol, nil
}

// ClearCurrencySymbol clears the value of the "currency_symbol" field.
func (m *CountryMutation) ClearCurrencySymbol() {
	m.currency_symbol = nil
	m.clearedFields[country.FieldCurrencySymbol] = struct{}{}
}

// CurrencySymbolCleared returns if the "currency_symbol" field was cleared in this mutation.
func (m *CountryMutation) CurrencySymbolCleared() bool {
	_, ok := m.clearedFields[country.FieldCurrencySymbol]
	return ok
}

// ResetCurrencySymbol resets all changes to the "currency_symbol" field.
func (m *CountryMutation) ResetCurrencySymbol() {
	m.currency_symbol = nil
	delete(m.clearedFields, country.FieldCurrencySymbol)
}

// SetConversionRate sets the "conversion_rate" field.
func (m *CountryMutation) SetConversionRate(f float64) {
	m.conversion_rate = &f
	m.addconversion_rate = nil
}

// ConversionRate returns the value of the "conversion_rate" field in the mutation.
func (m *CountryMutation) ConversionRate() (r float64, exists bool) {
	v := m.conversion_rate
	if v == nil {
		return
	}
	return *v, true
}

// OldConversionRate returns the old "conversion_rate" field's value of the Country entity.
// If the Country object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CountryMutation) OldConversionRate(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldConversionRate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldConversionRate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldConversionRate: %w", err)
	}
	return oldValue.ConversionRate, nil
}

// AddConversionRate adds f to the "conversion_rate" field.
func (m *CountryMutation) AddConversionRate(f float64) {
	if m.addconversion_rate != nil {
		*m.addconversion_rate += f
	} else {
		m.addconversion_rate = &f
	}
}

// AddedConversionRate returns the value that was added to the "conversion_rate" field in this mutation.
func (m *CountryMutation) AddedConversionRate() (r float64, exists bool) {
	v := m.addconversion_rate
	if v == nil {
		return
	}
	return *v, true
}

// ResetConversionRate resets all changes to the "conversion_rate" field.
func (m *CountryMutation) ResetConversionRate() {
	m.conversion_rate = nil
	m.addconversion_rate = nil
}

// SetStatus sets the "status" field.
func (m *CountryMutation) SetStatus(u uint8) {
	m.status = &u
	m.addstatus = nil
}

// Status returns the value of the "status" field in the mutation.
func (m *CountryMutation) Status() (r uint8, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Country entity.
// If the Country object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CountryMutation) OldStatus(ctx context.Context) (v uint8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// AddStatus adds u to the "status" field.
func (m *CountryMutation) AddStatus(u int8) {
	if m.addstatus != nil {
		*m.addstatus += u
	} else {
		m.addstatus = &u
	}
}

// AddedStatus returns the value that was added to the "status" field in this mutation.
func (m *CountryMutation) AddedStatus() (r int8, exists bool) {
	v := m.addstatus
	if v == nil {
		return
	}
	return *v, true
}

// ResetStatus resets all changes to the "status" field.
func (m *CountryMutation) ResetStatus() {
	m.status = nil
	m.addstatus = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *CountryMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *CountryMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Country entity.
// If the Country object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CountryMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *CountryMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *CountryMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *CountryMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Country entity.
// If the Country object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CountryMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *CountryMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// AddLocationIDs adds the "locations" edge to the CountryLocation entity by ids.
func (m *CountryMutation) AddLocationIDs(ids ...uint64) {
	if m.locations == nil {
		m.locations = make(map[uint64]struct{})
	}
	for i := range ids {
		m.locations[ids[i]] = struct{}{}
	}
}

// ClearLocations clears the "locations" edge to the CountryLocation entity.
func (m *CountryMutation) ClearLocations() {
	m.clearedlocations = true
}

// LocationsCleared reports if the "locations" edge to the CountryLocation entity was cleared.
func (m *CountryMutation) LocationsCleared() bool {
	return m.clearedlocations
}

// RemoveLocationIDs removes the "locations" edge to the CountryLocation entity by IDs.
func (m *CountryMutation) RemoveLocationIDs(ids ...uint64) {
	if m.removedlocations == nil {
		m.removedlocations = make(map[uint64]struct{})
	}
	for i := range ids {
		delete(m.locations, ids[i])
		m.removedlocations[ids[i]] = struct{}{}
	}
}

// RemovedLocations returns the removed IDs of the "locations" edge to the CountryLocation entity.
func (m *CountryMutation) RemovedLocationsIDs() (ids []uint64) {
	for id := range m.removedlocations {
		ids = append(ids, id)
	}
	return
}

// LocationsIDs returns the "locations" edge IDs in the mutation.
func (m *CountryMutation) LocationsIDs() (ids []uint64) {
	for id := range m.locations {
		ids = append(ids, id)
	}
	return
}

// ResetLocations resets all changes to the "locations" edge.
func (m *CountryMutation) ResetLocations() {
	m.locations = nil
	m.clearedlocations = false
	m.removedlocations = nil
}

// Where appends a list predicates to the CountryMutation builder.
func (m *CountryMutation) Where(ps ...predicate.Country) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the CountryMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *CountryMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Country, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *CountryMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *CountryMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Country).
func (m *CountryMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CountryMutation) Fields() []string {
	fields := make([]string, 0, 14)
	if m.iso2 != nil {
		fields = append(fields, country.FieldIso2)
	}
	if m.iso3 != nil {
		fields = append(fields, country.FieldIso3)
	}
	if m.name != nil {
		fields = append(fields, country.FieldName)
	}
	if m.official_name != nil {
		fields = append(fields, country.FieldOfficialName)
	}
	if m.numeric_code != nil {
		fields = append(fields, country.FieldNumericCode)
	}
	if m.phone_code != nil {
		fields = append(fields, country.FieldPhoneCode)
	}
	if m.capital != nil {
		fields = append(fields, country.FieldCapital)
	}
	if m.currency_name != nil {
		fields = append(fields, country.FieldCurrencyName)
	}
	if m.currency_code != nil {
		fields = append(fields, country.FieldCurrencyCode)
	}
	if m.currency_symbol != nil {
		fields = append(fields, country.FieldCurrencySymbol)
	}
	if m.conversion_rate != nil {
		fields = append(fields, country.FieldConversionRate)
	}
	if m.status != nil {
		fields = append(fields, country.FieldStatus)
	}
	if m.created_at != nil {
		fields = append(fields, country.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, country.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CountryMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case country.FieldIso2:
		return m.Iso2()
	case country.FieldIso3:
		return m.Iso3()
	case country.FieldName:
		return m.Name()
	case country.FieldOfficialName:
		return m.OfficialName()
	case country.FieldNumericCode:
		return m.NumericCode()
	case country.FieldPhoneCode:
		return m.PhoneCode()
	case country.FieldCapital:
		return m.Capital()
	case country.FieldCurrencyName:
		return m.CurrencyName()
	case country.FieldCurrencyCode:
		return m.CurrencyCode()
	case country.FieldCurrencySymbol:
		return m.CurrencySymbol()
	case country.FieldConversionRate:
		return m.ConversionRate()
	case country.FieldStatus:
		return m.Status()
	case country.FieldCreatedAt:
		return m.CreatedAt()
	case country.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CountryMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case country.FieldIso2:
		return m.OldIso2(ctx)
	case country.FieldIso3:
		return m.OldIso3(ctx)
	case country.FieldName:
		return m.OldName(ctx)
	case country.FieldOfficialName:
		return m.OldOfficialName(ctx)
	case country.FieldNumericCode:
		return m.OldNumericCode(ctx)
	case country.FieldPhoneCode:
		return m.OldPhoneCode(ctx)
	case country.FieldCapital:
		return m.OldCapital(ctx)
	case country.FieldCurrencyName:
		return m.OldCurrencyName(ctx)
	case country.FieldCurrencyCode:
		return m.OldCurrencyCode(ctx)
	case country.FieldCurrencySymbol:
		return m.OldCurrencySymbol(ctx)
	case country.FieldConversionRate:
		return m.OldConversionRate(ctx)
	case country.FieldStatus:
		return m.OldStatus(ctx)
	case country.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case country.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Country field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CountryMutation) SetField(name string, value ent.Value) error {
	switch name {
	case country.FieldIso2:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIso2(v)
		return nil
	case country.FieldIso3:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIso3(v)
		return nil
	case country.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case country.FieldOfficialName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOfficialName(v)
		return nil
	case country.FieldNumericCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNumericCode(v)
		return nil
	case country.FieldPhoneCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPhoneCode(v)
		return nil
	case country.FieldCapital:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCapital(v)
		return nil
	case country.FieldCurrencyName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCurrencyName(v)
		return nil
	case country.FieldCurrencyCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCurrencyCode(v)
		return nil
	case country.FieldCurrencySymbol:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCurrencySymbol(v)
		return nil
	case country.FieldConversionRate:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetConversionRate(v)
		return nil
	case country.FieldStatus:
		v, ok := value.(uint8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case country.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case country.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Country field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CountryMutation) AddedFields() []string {
	var fields []string
	if m.addconversion_rate != nil {
		fields = append(fields, country.FieldConversionRate)
	}
	if m.addstatus != nil {
		fields = append(fields, country.FieldStatus)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CountryMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case country.FieldConversionRate:
		return m.AddedConversionRate()
	case country.FieldStatus:
		return m.AddedStatus()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CountryMutation) AddField(name string, value ent.Value) error {
	switch name {
	case country.FieldConversionRate:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddConversionRate(v)
		return nil
	case country.FieldStatus:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStatus(v)
		return nil
	}
	return fmt.Errorf("unknown Country numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CountryMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(country.FieldOfficialName) {
		fields = append(fields, country.FieldOfficialName)
	}
	if m.FieldCleared(country.FieldNumericCode) {
		fields = append(fields, country.FieldNumericCode)
	}
	if m.FieldCleared(country.FieldPhoneCode) {
		fields = append(fields, country.FieldPhoneCode)
	}
	if m.FieldCleared(country.FieldCapital) {
		fields = append(fields, country.FieldCapital)
	}
	if m.FieldCleared(country.FieldCurrencyName) {
		fields = append(fields, country.FieldCurrencyName)
	}
	if m.FieldCleared(country.FieldCurrencyCode) {
		fields = append(fields, country.FieldCurrencyCode)
	}
	if m.FieldCleared(country.FieldCurrencySymbol) {
		fields = append(fields, country.FieldCurrencySymbol)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CountryMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CountryMutation) ClearField(name string) error {
	switch name {
	case country.FieldOfficialName:
		m.ClearOfficialName()
		return nil
	case country.FieldNumericCode:
		m.ClearNumericCode()
		return nil
	case country.FieldPhoneCode:
		m.ClearPhoneCode()
		return nil
	case country.FieldCapital:
		m.ClearCapital()
		return nil
	case country.FieldCurrencyName:
		m.ClearCurrencyName()
		return nil
	case country.FieldCurrencyCode:
		m.ClearCurrencyCode()
		return nil
	case country.FieldCurrencySymbol:
		m.ClearCurrencySymbol()
		return nil
	}
	return fmt.Errorf("unknown Country nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CountryMutation) ResetField(name string) error {
	switch name {
	case country.FieldIso2:
		m.ResetIso2()
		return nil
	case country.FieldIso3:
		m.ResetIso3()
		return nil
	case country.FieldName:
		m.ResetName()
		return nil
	case country.FieldOfficialName:
		m.ResetOfficialName()
		return nil
	case country.FieldNumericCode:
		m.ResetNumericCode()
		return nil
	case country.FieldPhoneCode:
		m.ResetPhoneCode()
		return nil
	case country.FieldCapital:
		m.ResetCapital()
		return nil
	case country.FieldCurrencyName:
		m.ResetCurrencyName()
		return nil
	case country.FieldCurrencyCode:
		m.ResetCurrencyCode()
		return nil
	case country.FieldCurrencySymbol:
		m.ResetCurrencySymbol()
		return nil
	case country.FieldConversionRate:
		m.ResetConversionRate()
		return nil
	case country.FieldStatus:
		m.ResetStatus()
		return nil
	case country.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case country.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Country field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CountryMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.locations != nil {
		edges = append(edges, country.EdgeLocations)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CountryMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case country.EdgeLocations:
		ids := make([]ent.Value, 0, len(m.locations))
		for id := range m.locations {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CountryMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedlocations != nil {
		edges = append(edges, country.EdgeLocations)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CountryMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case country.EdgeLocations:
		ids := make([]ent.Value, 0, len(m.removedlocations))
		for id := range m.removedlocations {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CountryMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedlocations {
		edges = append(edges, country.EdgeLocations)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CountryMutation) EdgeCleared(name string) bool {
	switch name {
	case country.EdgeLocations:
		return m.clearedlocations
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CountryMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Country unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CountryMutation) ResetEdge(name string) error {
	switch name {
	case country.EdgeLocations:
		m.ResetLocations()
		return nil
	}
	return fmt.Errorf("unknown Country edge %s", name)
}

// CountryLocationMutation represents an operation that mutates the CountryLocation nodes in the graph.
type CountryLocationMutation struct {
	config
	op                     Op
	typ                    string
	id                     *uint64
	sorting                *uint64
	addsorting             *int64
	name_en                *string
	name_zh                *string
	created_at             *time.Time
	updated_at             *time.Time
	deleted_at             *time.Time
	clearedFields          map[string]struct{}
	country                *uint64
	clearedcountry         bool
	parent                 *uint64
	clearedparent          bool
	child_locations        map[uint64]struct{}
	removedchild_locations map[uint64]struct{}
	clearedchild_locations bool
	done                   bool
	oldValue               func(context.Context) (*CountryLocation, error)
	predicates             []predicate.CountryLocation
}

var _ ent.Mutation = (*CountryLocationMutation)(nil)

// countrylocationOption allows management of the mutation configuration using functional options.
type countrylocationOption func(*CountryLocationMutation)

// newCountryLocationMutation creates new mutation for the CountryLocation entity.
func newCountryLocationMutation(c config, op Op, opts ...countrylocationOption) *CountryLocationMutation {
	m := &CountryLocationMutation{
		config:        c,
		op:            op,
		typ:           TypeCountryLocation,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCountryLocationID sets the ID field of the mutation.
func withCountryLocationID(id uint64) countrylocationOption {
	return func(m *CountryLocationMutation) {
		var (
			err   error
			once  sync.Once
			value *CountryLocation
		)
		m.oldValue = func(ctx context.Context) (*CountryLocation, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().CountryLocation.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCountryLocation sets the old CountryLocation of the mutation.
func withCountryLocation(node *CountryLocation) countrylocationOption {
	return func(m *CountryLocationMutation) {
		m.oldValue = func(context.Context) (*CountryLocation, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CountryLocationMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CountryLocationMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of CountryLocation entities.
func (m *CountryLocationMutation) SetID(id uint64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CountryLocationMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CountryLocationMutation) IDs(ctx context.Context) ([]uint64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().CountryLocation.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCountryID sets the "country_id" field.
func (m *CountryLocationMutation) SetCountryID(u uint64) {
	m.country = &u
}

// CountryID returns the value of the "country_id" field in the mutation.
func (m *CountryLocationMutation) CountryID() (r uint64, exists bool) {
	v := m.country
	if v == nil {
		return
	}
	return *v, true
}

// OldCountryID returns the old "country_id" field's value of the CountryLocation entity.
// If the CountryLocation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CountryLocationMutation) OldCountryID(ctx context.Context) (v *uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCountryID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCountryID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCountryID: %w", err)
	}
	return oldValue.CountryID, nil
}

// ClearCountryID clears the value of the "country_id" field.
func (m *CountryLocationMutation) ClearCountryID() {
	m.country = nil
	m.clearedFields[countrylocation.FieldCountryID] = struct{}{}
}

// CountryIDCleared returns if the "country_id" field was cleared in this mutation.
func (m *CountryLocationMutation) CountryIDCleared() bool {
	_, ok := m.clearedFields[countrylocation.FieldCountryID]
	return ok
}

// ResetCountryID resets all changes to the "country_id" field.
func (m *CountryLocationMutation) ResetCountryID() {
	m.country = nil
	delete(m.clearedFields, countrylocation.FieldCountryID)
}

// SetParentID sets the "parent_id" field.
func (m *CountryLocationMutation) SetParentID(u uint64) {
	m.parent = &u
}

// ParentID returns the value of the "parent_id" field in the mutation.
func (m *CountryLocationMutation) ParentID() (r uint64, exists bool) {
	v := m.parent
	if v == nil {
		return
	}
	return *v, true
}

// OldParentID returns the old "parent_id" field's value of the CountryLocation entity.
// If the CountryLocation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CountryLocationMutation) OldParentID(ctx context.Context) (v *uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldParentID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldParentID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldParentID: %w", err)
	}
	return oldValue.ParentID, nil
}

// ClearParentID clears the value of the "parent_id" field.
func (m *CountryLocationMutation) ClearParentID() {
	m.parent = nil
	m.clearedFields[countrylocation.FieldParentID] = struct{}{}
}

// ParentIDCleared returns if the "parent_id" field was cleared in this mutation.
func (m *CountryLocationMutation) ParentIDCleared() bool {
	_, ok := m.clearedFields[countrylocation.FieldParentID]
	return ok
}

// ResetParentID resets all changes to the "parent_id" field.
func (m *CountryLocationMutation) ResetParentID() {
	m.parent = nil
	delete(m.clearedFields, countrylocation.FieldParentID)
}

// SetSorting sets the "sorting" field.
func (m *CountryLocationMutation) SetSorting(u uint64) {
	m.sorting = &u
	m.addsorting = nil
}

// Sorting returns the value of the "sorting" field in the mutation.
func (m *CountryLocationMutation) Sorting() (r uint64, exists bool) {
	v := m.sorting
	if v == nil {
		return
	}
	return *v, true
}

// OldSorting returns the old "sorting" field's value of the CountryLocation entity.
// If the CountryLocation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CountryLocationMutation) OldSorting(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSorting is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSorting requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSorting: %w", err)
	}
	return oldValue.Sorting, nil
}

// AddSorting adds u to the "sorting" field.
func (m *CountryLocationMutation) AddSorting(u int64) {
	if m.addsorting != nil {
		*m.addsorting += u
	} else {
		m.addsorting = &u
	}
}

// AddedSorting returns the value that was added to the "sorting" field in this mutation.
func (m *CountryLocationMutation) AddedSorting() (r int64, exists bool) {
	v := m.addsorting
	if v == nil {
		return
	}
	return *v, true
}

// ResetSorting resets all changes to the "sorting" field.
func (m *CountryLocationMutation) ResetSorting() {
	m.sorting = nil
	m.addsorting = nil
}

// SetNameEn sets the "name_en" field.
func (m *CountryLocationMutation) SetNameEn(s string) {
	m.name_en = &s
}

// NameEn returns the value of the "name_en" field in the mutation.
func (m *CountryLocationMutation) NameEn() (r string, exists bool) {
	v := m.name_en
	if v == nil {
		return
	}
	return *v, true
}

// OldNameEn returns the old "name_en" field's value of the CountryLocation entity.
// If the CountryLocation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CountryLocationMutation) OldNameEn(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNameEn is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNameEn requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNameEn: %w", err)
	}
	return oldValue.NameEn, nil
}

// ResetNameEn resets all changes to the "name_en" field.
func (m *CountryLocationMutation) ResetNameEn() {
	m.name_en = nil
}

// SetNameZh sets the "name_zh" field.
func (m *CountryLocationMutation) SetNameZh(s string) {
	m.name_zh = &s
}

// NameZh returns the value of the "name_zh" field in the mutation.
func (m *CountryLocationMutation) NameZh() (r string, exists bool) {
	v := m.name_zh
	if v == nil {
		return
	}
	return *v, true
}

// OldNameZh returns the old "name_zh" field's value of the CountryLocation entity.
// If the CountryLocation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CountryLocationMutation) OldNameZh(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNameZh is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNameZh requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNameZh: %w", err)
	}
	return oldValue.NameZh, nil
}

// ResetNameZh resets all changes to the "name_zh" field.
func (m *CountryLocationMutation) ResetNameZh() {
	m.name_zh = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *CountryLocationMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *CountryLocationMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the CountryLocation entity.
// If the CountryLocation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CountryLocationMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *CountryLocationMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *CountryLocationMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *CountryLocationMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the CountryLocation entity.
// If the CountryLocation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CountryLocationMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *CountryLocationMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *CountryLocationMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *CountryLocationMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the CountryLocation entity.
// If the CountryLocation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CountryLocationMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *CountryLocationMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[countrylocation.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *CountryLocationMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[countrylocation.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *CountryLocationMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, countrylocation.FieldDeletedAt)
}

// ClearCountry clears the "country" edge to the Country entity.
func (m *CountryLocationMutation) ClearCountry() {
	m.clearedcountry = true
	m.clearedFields[countrylocation.FieldCountryID] = struct{}{}
}

// CountryCleared reports if the "country" edge to the Country entity was cleared.
func (m *CountryLocationMutation) CountryCleared() bool {
	return m.CountryIDCleared() || m.clearedcountry
}

// CountryIDs returns the "country" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// CountryID instead. It exists only for internal usage by the builders.
func (m *CountryLocationMutation) CountryIDs() (ids []uint64) {
	if id := m.country; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCountry resets all changes to the "country" edge.
func (m *CountryLocationMutation) ResetCountry() {
	m.country = nil
	m.clearedcountry = false
}

// ClearParent clears the "parent" edge to the CountryLocation entity.
func (m *CountryLocationMutation) ClearParent() {
	m.clearedparent = true
	m.clearedFields[countrylocation.FieldParentID] = struct{}{}
}

// ParentCleared reports if the "parent" edge to the CountryLocation entity was cleared.
func (m *CountryLocationMutation) ParentCleared() bool {
	return m.ParentIDCleared() || m.clearedparent
}

// ParentIDs returns the "parent" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ParentID instead. It exists only for internal usage by the builders.
func (m *CountryLocationMutation) ParentIDs() (ids []uint64) {
	if id := m.parent; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetParent resets all changes to the "parent" edge.
func (m *CountryLocationMutation) ResetParent() {
	m.parent = nil
	m.clearedparent = false
}

// AddChildLocationIDs adds the "child_locations" edge to the CountryLocation entity by ids.
func (m *CountryLocationMutation) AddChildLocationIDs(ids ...uint64) {
	if m.child_locations == nil {
		m.child_locations = make(map[uint64]struct{})
	}
	for i := range ids {
		m.child_locations[ids[i]] = struct{}{}
	}
}

// ClearChildLocations clears the "child_locations" edge to the CountryLocation entity.
func (m *CountryLocationMutation) ClearChildLocations() {
	m.clearedchild_locations = true
}

// ChildLocationsCleared reports if the "child_locations" edge to the CountryLocation entity was cleared.
func (m *CountryLocationMutation) ChildLocationsCleared() bool {
	return m.clearedchild_locations
}

// RemoveChildLocationIDs removes the "child_locations" edge to the CountryLocation entity by IDs.
func (m *CountryLocationMutation) RemoveChildLocationIDs(ids ...uint64) {
	if m.removedchild_locations == nil {
		m.removedchild_locations = make(map[uint64]struct{})
	}
	for i := range ids {
		delete(m.child_locations, ids[i])
		m.removedchild_locations[ids[i]] = struct{}{}
	}
}

// RemovedChildLocations returns the removed IDs of the "child_locations" edge to the CountryLocation entity.
func (m *CountryLocationMutation) RemovedChildLocationsIDs() (ids []uint64) {
	for id := range m.removedchild_locations {
		ids = append(ids, id)
	}
	return
}

// ChildLocationsIDs returns the "child_locations" edge IDs in the mutation.
func (m *CountryLocationMutation) ChildLocationsIDs() (ids []uint64) {
	for id := range m.child_locations {
		ids = append(ids, id)
	}
	return
}

// ResetChildLocations resets all changes to the "child_locations" edge.
func (m *CountryLocationMutation) ResetChildLocations() {
	m.child_locations = nil
	m.clearedchild_locations = false
	m.removedchild_locations = nil
}

// Where appends a list predicates to the CountryLocationMutation builder.
func (m *CountryLocationMutation) Where(ps ...predicate.CountryLocation) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the CountryLocationMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *CountryLocationMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.CountryLocation, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *CountryLocationMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *CountryLocationMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (CountryLocation).
func (m *CountryLocationMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CountryLocationMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.country != nil {
		fields = append(fields, countrylocation.FieldCountryID)
	}
	if m.parent != nil {
		fields = append(fields, countrylocation.FieldParentID)
	}
	if m.sorting != nil {
		fields = append(fields, countrylocation.FieldSorting)
	}
	if m.name_en != nil {
		fields = append(fields, countrylocation.FieldNameEn)
	}
	if m.name_zh != nil {
		fields = append(fields, countrylocation.FieldNameZh)
	}
	if m.created_at != nil {
		fields = append(fields, countrylocation.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, countrylocation.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, countrylocation.FieldDeletedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CountryLocationMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case countrylocation.FieldCountryID:
		return m.CountryID()
	case countrylocation.FieldParentID:
		return m.ParentID()
	case countrylocation.FieldSorting:
		return m.Sorting()
	case countrylocation.FieldNameEn:
		return m.NameEn()
	case countrylocation.FieldNameZh:
		return m.NameZh()
	case countrylocation.FieldCreatedAt:
		return m.CreatedAt()
	case countrylocation.FieldUpdatedAt:
		return m.UpdatedAt()
	case countrylocation.FieldDeletedAt:
		return m.DeletedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CountryLocationMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case countrylocation.FieldCountryID:
		return m.OldCountryID(ctx)
	case countrylocation.FieldParentID:
		return m.OldParentID(ctx)
	case countrylocation.FieldSorting:
		return m.OldSorting(ctx)
	case countrylocation.FieldNameEn:
		return m.OldNameEn(ctx)
	case countrylocation.FieldNameZh:
		return m.OldNameZh(ctx)
	case countrylocation.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case countrylocation.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case countrylocation.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	}
	return nil, fmt.Errorf("unknown CountryLocation field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CountryLocationMutation) SetField(name string, value ent.Value) error {
	switch name {
	case countrylocation.FieldCountryID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCountryID(v)
		return nil
	case countrylocation.FieldParentID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetParentID(v)
		return nil
	case countrylocation.FieldSorting:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSorting(v)
		return nil
	case countrylocation.FieldNameEn:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNameEn(v)
		return nil
	case countrylocation.FieldNameZh:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNameZh(v)
		return nil
	case countrylocation.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case countrylocation.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case countrylocation.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	}
	return fmt.Errorf("unknown CountryLocation field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CountryLocationMutation) AddedFields() []string {
	var fields []string
	if m.addsorting != nil {
		fields = append(fields, countrylocation.FieldSorting)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CountryLocationMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case countrylocation.FieldSorting:
		return m.AddedSorting()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CountryLocationMutation) AddField(name string, value ent.Value) error {
	switch name {
	case countrylocation.FieldSorting:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSorting(v)
		return nil
	}
	return fmt.Errorf("unknown CountryLocation numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CountryLocationMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(countrylocation.FieldCountryID) {
		fields = append(fields, countrylocation.FieldCountryID)
	}
	if m.FieldCleared(countrylocation.FieldParentID) {
		fields = append(fields, countrylocation.FieldParentID)
	}
	if m.FieldCleared(countrylocation.FieldDeletedAt) {
		fields = append(fields, countrylocation.FieldDeletedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CountryLocationMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CountryLocationMutation) ClearField(name string) error {
	switch name {
	case countrylocation.FieldCountryID:
		m.ClearCountryID()
		return nil
	case countrylocation.FieldParentID:
		m.ClearParentID()
		return nil
	case countrylocation.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown CountryLocation nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CountryLocationMutation) ResetField(name string) error {
	switch name {
	case countrylocation.FieldCountryID:
		m.ResetCountryID()
		return nil
	case countrylocation.FieldParentID:
		m.ResetParentID()
		return nil
	case countrylocation.FieldSorting:
		m.ResetSorting()
		return nil
	case countrylocation.FieldNameEn:
		m.ResetNameEn()
		return nil
	case countrylocation.FieldNameZh:
		m.ResetNameZh()
		return nil
	case countrylocation.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case countrylocation.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case countrylocation.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown CountryLocation field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CountryLocationMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.country != nil {
		edges = append(edges, countrylocation.EdgeCountry)
	}
	if m.parent != nil {
		edges = append(edges, countrylocation.EdgeParent)
	}
	if m.child_locations != nil {
		edges = append(edges, countrylocation.EdgeChildLocations)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CountryLocationMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case countrylocation.EdgeCountry:
		if id := m.country; id != nil {
			return []ent.Value{*id}
		}
	case countrylocation.EdgeParent:
		if id := m.parent; id != nil {
			return []ent.Value{*id}
		}
	case countrylocation.EdgeChildLocations:
		ids := make([]ent.Value, 0, len(m.child_locations))
		for id := range m.child_locations {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CountryLocationMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedchild_locations != nil {
		edges = append(edges, countrylocation.EdgeChildLocations)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CountryLocationMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case countrylocation.EdgeChildLocations:
		ids := make([]ent.Value, 0, len(m.removedchild_locations))
		for id := range m.removedchild_locations {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CountryLocationMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedcountry {
		edges = append(edges, countrylocation.EdgeCountry)
	}
	if m.clearedparent {
		edges = append(edges, countrylocation.EdgeParent)
	}
	if m.clearedchild_locations {
		edges = append(edges, countrylocation.EdgeChildLocations)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CountryLocationMutation) EdgeCleared(name string) bool {
	switch name {
	case countrylocation.EdgeCountry:
		return m.clearedcountry
	case countrylocation.EdgeParent:
		return m.clearedparent
	case countrylocation.EdgeChildLocations:
		return m.clearedchild_locations
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CountryLocationMutation) ClearEdge(name string) error {
	switch name {
	case countrylocation.EdgeCountry:
		m.ClearCountry()
		return nil
	case countrylocation.EdgeParent:
		m.ClearParent()
		return nil
	}
	return fmt.Errorf("unknown CountryLocation unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CountryLocationMutation) ResetEdge(name string) error {
	switch name {
	case countrylocation.EdgeCountry:
		m.ResetCountry()
		return nil
	case countrylocation.EdgeParent:
		m.ResetParent()
		return nil
	case countrylocation.EdgeChildLocations:
		m.ResetChildLocations()
		return nil
	}
	return fmt.Errorf("unknown CountryLocation edge %s", name)
}
